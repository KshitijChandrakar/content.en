# -*- coding: utf-8 -*-
"""Experiment1FDS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LmQr1Bcup7zhGDKSKc4ruO-sqBcJMkmZ
"""

!source bin/activate
!which python3



!bin/pip install ucimlrepo columnar

#from "lib/python3.11/site-packages/ucimlrepo" import fetch_ucirepo, list_available_datasets
#import lib/python3.11/site-packages/ucimlrepo/fetch.py
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from pprint import pprint
import seaborn as sb
from columnar import columnar



list_available_datasets(search="car evaluation")

dataset_ids = {
"iris" :53,
"heart_disease" : 45,
"wine_quality" : 186,
"student_performance" : 320,
"abalone" : 1,
"breast_cancer" : 17,
"apartment_rent" : 555,
"cover_type" : 31,
"letterrecog_MMST" : 59,
"car_evaluation" : 19
}
datasets_to_use = ["car_evaluation", "abalone", "breast_cancer"]

def ScatterXY(X, Y):
  for i in X.keys():
    plt.scatter(y = X[i], x = Y['class'], s = 10)
    plt.xlabel('class')
    plt.ylabel(i)
    plt.title(i + " " + "Scatter Plot")
    plt.show()

def Scatter(i, j, X=0, Y=None, num_rows = 1000):
  if type(Y) == type(None):
    plt.scatter(y = X[i][:num_rows], x = X[j][:num_rows] )
    plt.xlabel(j)
    plt.ylabel(i)
    plt.title(i + " " + j + " Plot")
    plt.show()
  else:
    plt.scatter(y = X[i][:num_rows], x = Y[j][:num_rows])
    plt.xlabel(j)
    plt.ylabel(i)
    plt.title(i + " vs " + j + " Plot")
    plt.show()

def ScatterEverything(X):
  for i in X.keys():
    for j in X.keys():
      if i == j: continue;
      Scatter(i, j, X)

def fetch(z):
  current_dataset = z
  current_dataset = fetch_ucirepo(id=dataset_ids[current_dataset])
  print("Fetched", z)
  # X, Y = current_dataset.data.features, current_dataset.data.targets
  # variables = current_dataset.variables
  # metadata = current_dataset.metadata
  return current_dataset

def DatasetInit(z):
  X, Y, variables, metadata = fetch(z)
  #ScatterXY(X, Y)
  ScatterEverything(X)

def Histogram(column_name, X):
    """
    Generates a histogram for the specified column in the DataFrame.

    Args:
    column_name (str): The name of the column to plot.
    X (pd.DataFrame): The DataFrame containing the data.
    """

    plt.hist(X[column_name])
    plt.xlabel(column_name)
    plt.ylabel("Frequency")
    plt.title(f"Histogram of {column_name}")
    plt.show()

def MulticolorHistogram(X, column_name, Y, color_col, num_bins=10):
    """
    Generates a multicolor histogram for the specified column in the DataFrame.

    Args:
        column_name (str): The name of the column to plot.
        X (pd.DataFrame): The DataFrame containing the data.
        color_col (str): The name of the column to use for coloring the bars.
        num_bins (int, optional): The number of bins to use for the histogram. Defaults to 10.
    """

    # Get unique values in color_col
    unique_colors = Y[color_col].unique()

    # Create histogram for each unique color
    for color in unique_colors:
        subset = X[Y[color_col] == color]  # Filter data for current color
        plt.hist(subset[column_name], num_bins, alpha=0.5, label=color)  # Plot histogram for subset

    plt.xlabel(column_name)
    plt.ylabel("Frequency")
    plt.title(f"Multicolor Histogram of {column_name} by {color_col}")
    plt.legend()  # Add legend to show color mapping
    plt.show()

def features_end_index(variables):
   for i in range(len(variables["role"])):
      if variables["role"][i] == "Target": return i;

datasets = {i : fetch(i) for i in datasets_to_use}

print(datasets["car_evaluation"].data.keys())

def print_stats():
  for dataset in datasets:
    print("="*10, "Current Dataset: " + dataset, sep="\n")
    features = datasets[dataset].data.features
    variables = datasets[dataset].data.variables["name"][:features_end_index(datasets[dataset].data.targets)]
    stats = []
    for j in features:
      feature = features[j]
      stats.append((feature, feature.mean(), feature.median(), feature.std(), feature.max(), feature.min()))
    columnar(stats, variables)
print_stats()